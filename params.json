{"name":"Parking","tagline":"4378 Data Mining Project","body":"######Note, the three links above will give a 404 error if you are not logged into Github and have not been invited by Isaac Karrer as a collaborator.\r\n\r\n#Parking Application\r\nA Ruby on Rails web application is proposed as a backend for the mobile user interface.  A RESTful API will be added so that an Android mobile app may request data and login.\r\n\r\n\r\nThe starting point from this application is from the repository [SampleApp](https://github.com/ike54/sampleApp).  The working web application, SampleApp may be viewed [here](https://blooming-falls-1904.herokuapp.com/) (the application must wake up, patience please).  SampleApp is the result of Isaac Karrer engaging in the [*Ruby on Rails Tutorial*](http://railstutorial.org/) by [Michael Hartl](http://michaelhartl.com/).  Once the Microposts model, table and tests are removed all that remains is an application where users may register, login, change passwords, and choose an avatar via gravatar.\r\n- When a user requests to park, user parking history would be used to list the probability to find a spot in their preferred lot.  Lots in close proximitity to the preferred lot and their probabilities could also be listed.\r\n    - The GPS coordinates could also be used to estimate the time it would take for a user to travel from the location where they requeseted to park, to their parking spot in a chosen lot.\r\n    - Combining the estimated time to reach the requested lot, the number of users currently en route to the lot, the number of people per time segment who successfully find a spot, and the number of people who could not find a spot and aborted a parking attempt per time segment, a probabilty to find a spot for that moment could be calculated.\r\n- When a user parks, GPS coordinates may be used to create a prioritized list of the parking lots in which the user may be currently located, with an option to select the parking lot from a full list if the parking lot does not appear in the original list.\r\n    - The list would be used to confirm which lot the user found a spot to park in. Additionally the list could be used when the user has found open spots while walking through the parking lot.\r\n    - A user's parking spot may be located on the border between two lots.  GPS on an Android device is not accurate enough to determine which lot a person is located.\r\n- Table and models for parking lot perimeters with GPS coordinates will be created\r\n    - What datatype and how many points to use to establish parking lot perimeter?\r\n- Table and models for parker's queueing statistics will be created\r\n\t- Example fields:\r\n\t    - Parking lot Id\r\n\t    - User Id\r\n\t    - Time enqueued\r\n\t    - Time spot found successfully\r\n\t    - Time left spot\r\n\t    - Park aborted time\r\n\t    - GPS location when spot requested\r\n\t    - GPS location when successfully parked\r\n- Table and models for open spots reported will be created\r\n    - Example fields:\r\n        - Parking lot Id\r\n        - User Id\r\n        - GPS Location of reported spot\r\n        - Time reported open\r\n- To prevent malicious users submitting unreliable data, only users with a texas state email will be allowed to register for the application\r\n\r\n#To Do List\r\n- Create RESTful API for all controller methods except for ones which require an admin user, e.g. delete\r\n- Create Android application for sending REST API requests for user registration, login, password recovery, Request to Park, Abort Park, Parked, Open Spot Found, etc.\r\n- Remove Microposts\r\n- Remove ability to change email login\r\n- Create ability to recover password\r\n- Add a validation that the user's email ends in @txstate.edu\r\n- (optional) Create an active mailer to confirm a user has a Texas State email address or to recover a password (further validates that the user has an active texas state email)\r\n    - Add Confirmation Code and Confrimed fields to user model\r\n    - Add controller method to user controller which expects a User Id and Confrimation Code\r\n        - If Confirmation Code and User Id match, set Confirmed to True\r\n    - Create a route ex. users/1/confirm/code which maps to controller method\r\n    - Create action mailer template which accepts User Id as parameter\r\n        - Send link to confirm route\r\n    - Use and observer to generate a Confirmation Code on new accounts\r\n    - Create a helper method to check if a User Id is confirmed\r\n- Create tables for parking data logging\r\n- Implement Data Mining logic to populate proposed lists\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}